<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ifuncat.github.io/</id><title>ifuncat</title><subtitle>A minimal, portfolio, sidebar, bootstrap Jekyll theme with responsive web design and focuses on text presentation.</subtitle> <updated>2021-06-16T01:20:10+08:00</updated> <author> <name>ifuncat</name> <uri>https://ifuncat.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ifuncat.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://ifuncat.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.2.0">Jekyll</generator> <rights> © 2021 ifuncat </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Dcoker系列19-部署服务到Swarm集群</title><link href="https://ifuncat.github.io/posts/docker19/" rel="alternate" type="text/html" title="Dcoker系列19-部署服务到Swarm集群" /><published>2021-06-15T23:00:00+08:00</published> <updated>2021-06-15T23:00:00+08:00</updated> <id>https://ifuncat.github.io/posts/docker19/</id> <content src="https://ifuncat.github.io/posts/docker19/" /> <author> <name>ifuncat</name> </author> <category term="Docker" /> <summary> 一. 准备工作 搭建Swarm集群, 详见上述教程部分 两manager节点, 两worker节点, 搭建成功如下 [root@localhost ~]# docker node ls ID HOSTNAME STATUS AVAILABILITY MANAGER STATUS ENGINE VERSION j2vnip3q377akcinlit7debtk * localhost.localdomain Ready Active Leader 20.10.7 j5hx1x6uzcazvgylbz57pdy23 localhost.localdomain Ready Active Re... </summary> </entry> <entry><title>Dcoker系列18-搭建DockerSwarm集群</title><link href="https://ifuncat.github.io/posts/docker18/" rel="alternate" type="text/html" title="Dcoker系列18-搭建DockerSwarm集群" /><published>2021-06-15T20:00:00+08:00</published> <updated>2021-06-15T20:00:00+08:00</updated> <id>https://ifuncat.github.io/posts/docker18/</id> <content src="https://ifuncat.github.io/posts/docker18/" /> <author> <name>ifuncat</name> </author> <category term="Docker" /> <summary> 一. 准备工作 VMWare搭建4个CentOS7虚拟机, 处于同一内网中, 每个虚拟机均安装了Docker, 安排如下 此为本地测试所用, 实际情况manager节点的数量必须为基数, 才能满足节点选举. 虚拟机内网IP swarm节点类型 192.168.245.157 manager 192.168.245.167 worker 192.168.245.177 worker 192.168.245.187 manager 二. 搭建Swarm 1. 搭建第一个Manager Node 进入第一台虚拟机, 先... </summary> </entry> <entry><title>Dcoker系列17-DockerSwarm介绍</title><link href="https://ifuncat.github.io/posts/docker17/" rel="alternate" type="text/html" title="Dcoker系列17-DockerSwarm介绍" /><published>2021-06-14T23:00:00+08:00</published> <updated>2021-06-14T23:00:00+08:00</updated> <id>https://ifuncat.github.io/posts/docker17/</id> <content src="https://ifuncat.github.io/posts/docker17/" /> <author> <name>ifuncat</name> </author> <category term="Docker" /> <summary> 一. 概要 官方文档 1. Docker回顾 之前使用的docker run 启动一个容器, docker-compose up 启动一个项目, 即启动一组关联的容器, 这些操作都是基于单机的. 容器都是在一台机器上运行 如果想管理/部署集群服务, 使用docker, docker-compose效率较低 2. 什么是Swarm 原生支持Docker集群管理的工具 可以把多个Docker主机组成的系统转换为单一的虚拟Docker主机, 使得容器可以组成跨主机的子网网络 可以把所有集群中所有Docker Engine整合进一个虚拟机Engine的资源池, 通过执行命令与单一的主Swarm进行够通, 而无需和每个Docker Engine够通, 方便管理主机资源, 保证容器高效运行. 3. 核心概念 Nodes ... </summary> </entry> <entry><title>Dcoker系列16-DockerCompose部署项目</title><link href="https://ifuncat.github.io/posts/docker16/" rel="alternate" type="text/html" title="Dcoker系列16-DockerCompose部署项目" /><published>2021-06-14T16:00:00+08:00</published> <updated>2021-06-16T01:18:39+08:00</updated> <id>https://ifuncat.github.io/posts/docker16/</id> <content src="https://ifuncat.github.io/posts/docker16/" /> <author> <name>ifuncat</name> </author> <category term="Docker" /> <summary> 一. 准备微服务jar 一个非常简单的Springboot构建的web服务, 使用了redis, 每访问一次redis中的值递增 1. 编写源码 项目大致结构 &amp;lt;?xml version="1.0" encoding="UTF-8"?&amp;gt; &amp;lt;project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"&amp;gt; &amp;lt;modelVersion&amp;gt;4.... </summary> </entry> <entry><title>Dcoker系列15-DockerCompose介绍</title><link href="https://ifuncat.github.io/posts/docker15/" rel="alternate" type="text/html" title="Dcoker系列15-DockerCompose介绍" /><published>2021-06-14T10:20:22+08:00</published> <updated>2021-06-16T01:18:39+08:00</updated> <id>https://ifuncat.github.io/posts/docker15/</id> <content src="https://ifuncat.github.io/posts/docker15/" /> <author> <name>ifuncat</name> </author> <category term="Docker" /> <summary> 一. 什么是DockerCompose 1. 回顾 开始接触Docker时, 如果安装一个程序, 需要手动拉取镜像, 运行容器. 如果一个服务需要很多关联的服务, 比如一个微服务需要使用MySQL, Redis, MQ等. 这样安装维护起来, 手动操作比较麻烦. 尤其是当微服务采用集群部署, 数据库读写分离, Redis分片集群等, 手动操作难以维护, 效率非常低. 需要一些自动化的操作, 轻松高效地管理容器, 定义运行多个容器 2. DockerCompose 介绍 官方文档 DockerCompose作为一个定义和运行多个容器的Docker工具, 使用yaml配置文件来配置服务. 使用简单的命令, 就能根据配置来创建和运行服务. 简单理解为: 批量操作容器的工具 3. DockerCompose的重要概念 service: 服务, ... </summary> </entry> </feed>
